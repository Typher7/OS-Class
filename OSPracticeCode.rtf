{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Python File Manipulation\
\
\'97\'97\'97\'97 start \'97\'97\'97\'97\'97\
import os\
\
# File path\
file_path = 'example_file.txt'\
\
# Create and write to the file\
with open(file_path, 'w') as file:\
    file.write('Hello, this is a test file.\\n')\
    file.write('It contains multiple lines of text.')\
\
# Read from the file\
with open(file_path, 'r') as file:\
    content = file.read()\
    print('File Content:')\
    print(content)\
\
# Delete the file\
os.remove(file_path)\
print(f'File \{file_path\} deleted.')\
\
\'97\'97\'97\'97\'97end Python #1 \'97\'97\'97\'97\'97\
\
\'97\'97\'97\'97\'97 start Python File Creation \'97\'97\'97\'97\'97\
\
import subprocess\
\
# Execute a simple command\
result = subprocess.run(['echo', 'Hello from subprocess!'], capture_output=True, text=True)\
\
# Output the result\
print('Subprocess Output:')\
print(result.stdout)\
\
\'97\'97\'97\'97 end Python #2 \'97\'97\'97\'97\'97\
\
\'97\'97\'97\'97 Start C file manipulation \'97\'97\'97\'97\'97\
\
#include <stdio.h>\
#include <stdlib.h>\
\
int main() \{\
    FILE *file;\
    const char *file_path = "example_file.txt";\
\
    // Create and write to the file\
    file = fopen(file_path, "w");\
    if (file == NULL) \{\
        perror("Error opening file");\
        return EXIT_FAILURE;\
    \}\
    fprintf(file, "Hello, this is a test file.\\n");\
    fprintf(file, "It contains multiple lines of text.");\
    fclose(file);\
\
    // Read from the file\
    char buffer[256];\
    file = fopen(file_path, "r");\
    if (file == NULL) \{\
        perror("Error opening file");\
        return EXIT_FAILURE;\
    \}\
    printf("File Content:\\n");\
    while (fgets(buffer, sizeof(buffer), file)) \{\
        printf("%s", buffer);\
    \}\
    fclose(file);\
\
    // Delete the file\
    if (remove(file_path) != 0) \{\
        perror("Error deleting file");\
        return EXIT_FAILURE;\
    \}\
    printf("File %s deleted.\\n", file_path);\
\
    return EXIT_SUCCESS;\
\}\
\
\'97\'97\'97 End C #1 \'97\'97\'97\'97\
\
\'97\'97\'97 Start C Process Creation \'97\'97\'97\
\
#include <stdio.h>\
#include <stdlib.h>\
#include <unistd.h>\
\
int main() \{\
    pid_t pid = fork();\
\
    if (pid < 0) \{\
        perror("fork failed");\
        return EXIT_FAILURE;\
    \}\
\
    if (pid == 0) \{\
        // Child process\
        execlp("echo", "echo", "Hello from child process!", NULL);\
        // execlp only returns if there's an error\
        perror("execlp failed");\
        return EXIT_FAILURE;\
    \} else \{\
        // Parent process\
        wait(NULL); // Wait for child process to complete\
        printf("Child process completed.\\n");\
    \}\
\
    return EXIT_SUCCESS;\
\}\
\
\
\'97\'97\'97 End C #2 \'97\'97\'97\'97\'97\'97\
\
}